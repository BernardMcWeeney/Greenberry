---
import Badge from '../ui/Badge.astro';
import Container from './Container.astro';
import Button from '../common/Button.astro';

export interface Metric {
  value: string;
  label: string;
}

export interface Props {
  title: string;
  description?: string;

  // Badge
  badgeText?: string;
  badgeVariant?:
    | 'default' | 'primary' | 'success' | 'warning'
    | 'danger'  | 'info'    | 'purple'  | 'blue'
    | 'green'   | 'yellow'  | 'red';

  // Highlight underline
  highlightedText?: string;
  highlightPosition?: 'start' | 'middle' | 'end';
  highlightTextClass?: string;   // e.g., 'text-greenberry-600'
  highlightUnderlineClass?: string; // e.g., 'bg-greenberry-500/40'

  // Background & layout
  backgroundVariant?: 'neutral' | 'decorated'; // simplified
  centered?: boolean;
  paddingY?: 'sm' | 'md' | 'lg' | 'xl';


  // CTA helpers (or use <slot name="actions">)
  primaryCtaHref?: string;
  primaryCtaLabel?: string;
  primaryCtaVariant?: 'primary' | 'outline' | 'secondary';
  secondaryCtaHref?: string;
  secondaryCtaLabel?: string;
  secondaryCtaVariant?: 'primary' | 'outline' | 'secondary';

  // Optional metrics card beneath lead text
  metrics?: Metric[]; // up to 3–4 suggested
}

const {
  title,
  description,
  badgeText,
  badgeVariant = 'primary',
  highlightedText,
  highlightPosition = 'end',
  highlightTextClass = 'text-greenberry-600',
  highlightUnderlineClass = 'bg-greenberry-500/40',

  backgroundVariant = 'neutral',
  centered = true,
  paddingY = 'xl',

  primaryCtaHref,
  primaryCtaLabel,
  primaryCtaVariant = 'primary',
  secondaryCtaHref,
  secondaryCtaLabel,
  secondaryCtaVariant = 'outline',

  metrics = [],
} = Astro.props;

// Spacing to match your new heroes
const paddingClasses = {
  sm: 'py-12',
  md: 'py-16',
  lg: 'py-20',
  xl: 'py-20 lg:py-28',
};

// Light/off-white hero background (no grey component surfaces)
const backgrounds = {
  neutral: 'bg-neutral-50 dark:bg-neutral-800/50',
  decorated: 'bg-neutral-50 dark:bg-neutral-800/50', // same base; decoration handled below
};

const containerClass = centered ? 'max-w-4xl mx-auto text-center' : 'max-w-5xl mx-auto';

// Build the highlighted title HTML safely-ish for one highlight token
const wrapHighlight = (text: string) =>
  `<span class="relative inline-block ${highlightTextClass}">
     ${text}
     <span class="absolute -bottom-1 left-0 w-full h-1.5 ${highlightUnderlineClass} rounded-full"></span>
   </span>`;

function buildTitleHtml(): string {
  if (!highlightedText) return title;

  const safeTitle = title; // assume clean; we control the highlight token
  if (highlightPosition === 'start') {
    // Starts with highlightedText conceptually
    return `${wrapHighlight(highlightedText)} ${safeTitle.replace(highlightedText, '').trim()}`;
  }

  if (highlightPosition === 'middle') {
    const idx = safeTitle.indexOf(highlightedText);
    if (idx === -1) return safeTitle; // fallback if token not found
    const before = safeTitle.slice(0, idx);
    const after = safeTitle.slice(idx + highlightedText.length);
    return `${before}${wrapHighlight(highlightedText)}${after}`;
  }

  // end (default)
  if (safeTitle.endsWith(highlightedText)) {
    const before = safeTitle.slice(0, -highlightedText.length).trimEnd();
    return `${before} ${wrapHighlight(highlightedText)}`;
  }
  // token not at end—append highlighted token visually
  return `${safeTitle} ${wrapHighlight(highlightedText)}`;
}

const titleHtml = buildTitleHtml();
---

<section class={`${paddingClasses[paddingY]} ${backgrounds[backgroundVariant]} relative overflow-hidden`}>
  <!-- Decorative glow (perf-friendly: no filters, single element) -->
  <div aria-hidden="true"
      class="absolute inset-0 -z-10 pointer-events-none
              [contain:layout_paint_style]
              [background:
                radial-gradient(40vmin_40vmin_at_85%_0%, rgba(22,163,73,0.35), transparent 70%),
                radial-gradient(48vmin_48vmin_at_0%_100%, rgba(22,163,73,0.25), transparent 70%)
              ]">
  </div>


  <!-- Optional extra decoration layer when variant is "decorated" -->
  {backgroundVariant === 'decorated' && (
    <div class="pointer-events-none absolute inset-0">
      <div class="absolute top-0 right-0 w-1/3 h-1/3 bg-greenberry-500/10 blur-3xl rounded-full -translate-y-1/2 translate-x-1/3"></div>
      <div class="absolute bottom-0 left-0 w-1/3 h-1/3 bg-greenberry-500/10 blur-3xl rounded-full translate-y-1/2 -translate-x-1/3"></div>
    </div>
  )}

  <Container>
    <div class={`relative z-10 ${containerClass}`}>
      {badgeText && (
        <div class="mb-4">
          <Badge text={badgeText} variant={badgeVariant} size="md" />
        </div>
      )}

      <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-neutral-900 dark:text-white leading-tight mb-6" set:html={titleHtml} />

      {description && (
        <p class="text-xl text-neutral-600 dark:text-neutral-300 mb-8 max-w-3xl mx-auto">
          <slot name="description">{description}</slot>
        </p>
      )}

      {metrics.length > 0 && (
        <div class="bg-white dark:bg-neutral-800 rounded-lg p-6 shadow-md max-w-2xl mx-auto mb-8">
          <div class={`grid ${metrics.length === 4 ? 'grid-cols-2 sm:grid-cols-4' : 'grid-cols-1 sm:grid-cols-3'} gap-4 text-center`}>
            {metrics.map((m) => (
              <div>
                <p class="text-3xl font-bold text-greenberry-600 dark:text-greenberry-400">{m.value}</p>
                <p class="text-sm text-neutral-600 dark:text-neutral-300">{m.label}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Actions: either provided via props or a custom slot -->
      { (primaryCtaHref && primaryCtaLabel) || (secondaryCtaHref && secondaryCtaLabel) ? (
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          {primaryCtaHref && primaryCtaLabel && (
            <Button href={primaryCtaHref} variant={primaryCtaVariant} size="lg">
              {primaryCtaLabel}
            </Button>
          )}
          {secondaryCtaHref && secondaryCtaLabel && (
            <Button href={secondaryCtaHref} variant={secondaryCtaVariant} size="lg">
              {secondaryCtaLabel}
            </Button>
          )}
        </div>
      ) : (
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <slot name="actions" />
        </div>
      )}
    </div>
  </Container>
</section>
