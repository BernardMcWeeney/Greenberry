---
/**
 * src/components/common/Seo.astro
 * Sitewide SEO + JSON-LD with special handling for /suites/<id>.
 *
 * - Organization/LocalBusiness schema with real NAP (set in /src/data/config).
 * - BreadcrumbList on inner pages.
 * - For /suites/<id>: Service schema with Offers (Setup/Launch/Grow/Pro) + optional FAQPage.
 * - Uses astro-seo for Open Graph/Twitter and meta tags.
 */

import { SEO as AstroSEO } from "astro-seo";
import { SITE, COMPANY, SOCIAL_LINKS } from "../../data/config";
import { services, getServiceById } from "../../data/services";
import { solutions, getSolutionById } from "../../data/solutions";
import { suites } from "../../data/suites";
import type { PortfolioProject } from "../../data/portfolioProjects";
import { portfolioProjects } from "../../data/portfolioProjects";

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  type?: string;
}

const {
  title = SITE.title,
  description = SITE.description,
  image = SITE.ogImage,
  type = "website"
} = Astro.props;

// Canonical
const canonical = new URL(Astro.url.pathname, Astro.site).toString();

// Path analysis
const path = Astro.url.pathname.replace(/^\/|\/$/g, '') || 'index';
const pathSegments = path.split('/');

// Page type defaults
let schemaType = "WebPage";
let currentService: any = null;
let currentSolution: any = null;
let currentSuite: any = null;
let currentProject: PortfolioProject | null = null;

// Simple detectors
if (path === 'index') schemaType = "WebSite";
if (path === 'about') schemaType = "AboutPage";
if (path === 'contact') schemaType = "ContactPage";

if (pathSegments[0] === 'services') {
  schemaType = "Service";
  if (pathSegments[1]) currentService = getServiceById?.(pathSegments[1]) ?? null;
}

if (pathSegments[0] === 'solutions') {
  schemaType = "Service";
  if (pathSegments[1]) currentSolution = getSolutionById?.(pathSegments[1]) ?? null;
}

// Suites detection (this powers Service + Offers schema for suite pages)
if (pathSegments[0] === 'suites' && pathSegments[1]) {
  currentSuite = suites.find((s: any) => s.id === pathSegments[1]) ?? null;
  if (currentSuite) schemaType = "Service";
}

if (pathSegments[0] === 'portfolio') {
  if (pathSegments[1]) {
    currentProject = portfolioProjects.find(p => p.id === pathSegments[1]) || null;
    schemaType = "ItemPage";
  } else {
    schemaType = "CollectionPage";
  }
}

// Schema type
type SchemaObject = Record<string, any>;

// Organization / Local
const organizationSchema: SchemaObject = {
  "@context": "https://schema.org",
  "@type": ["Organization","ProfessionalService","LocalBusiness"],
  "@id": `${SITE.url}#organization`,
  "name": COMPANY.name,
  "url": SITE.url,
  "logo": {
    "@type": "ImageObject",
    "url": SITE.ogImage,
    "width": 1200,
    "height": 630
  },
  "image": SITE.ogImage,
  "description": COMPANY.description || SITE.description,
  "telephone": COMPANY.phone || "",
  "email": COMPANY.email || "",
  "address": {
    "@type": "PostalAddress",
    "streetAddress": COMPANY.addressStreet,
    "addressLocality": COMPANY.addressLocality,
    "addressRegion": COMPANY.addressRegion,
    "postalCode": COMPANY.postalCode,
    "addressCountry": "IE"
  },
  "areaServed": { "@type": "Country", "name": "Ireland" },
  "contactPoint": COMPANY.phone ? [{
    "@type":"ContactPoint",
    "contactType":"customer support",
    "telephone": COMPANY.phone,
    "email": COMPANY.email || "",
    "areaServed":"IE",
    "availableLanguage":["en-IE","en"]
  }] : undefined,
  "sameAs": [
    SOCIAL_LINKS.twitter,
    SOCIAL_LINKS.facebook,
    SOCIAL_LINKS.instagram,
    SOCIAL_LINKS.linkedin
  ].filter(Boolean),
  "priceRange": COMPANY.priceRange ?? "€€"
};


// Base WebPage
const baseSchema: SchemaObject = {
  "@context": "https://schema.org",
  "@type": schemaType,
  "url": canonical,
  "name": title,
  "description": description,
  "inLanguage": "en-IE",
  "isPartOf": {
    "@type": "WebSite",
    "@id": `${SITE.url}#website`,
    "url": SITE.url,
    "name": SITE.title,
    "description": SITE.description,
    "publisher": { "@id": `${SITE.url}#organization` }
  }
};

let schemaData: SchemaObject[] = [organizationSchema, baseSchema];

// Homepage
if (path === 'index') {
  const websiteSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "@id": `${SITE.url}#website`,
    "url": SITE.url,
    "name": SITE.title,
    "description": SITE.description
  };
  schemaData = [organizationSchema, websiteSchema];
}

// Breadcrumbs (inner pages only)
if (path !== 'index') {
  // Build readable names (replace slugs, map suites/services to titles where possible)
  const readable = (seg: string, idx: number) => {
    if (idx === 0 && seg === 'suites') return 'Suites';
    if (idx === 0 && seg === 'services') return 'Services';
    if (idx === 0 && seg === 'solutions') return 'Solutions';
    if (idx === 0 && seg === 'portfolio') return 'Portfolio';
    // Suite/service/solution item names
    if (pathSegments[0] === 'suites' && currentSuite && idx === 1) return currentSuite.name;
    if (pathSegments[0] === 'services' && currentService && idx === 1) return currentService.title;
    if (pathSegments[0] === 'solutions' && currentSolution && idx === 1) return currentSolution.title;
    // Fallback: prettify segment
    return seg.replace(/-/g, ' ').replace(/\b\w/g, (m) => m.toUpperCase());
  };

  const breadcrumbItems = [
    { "@type":"ListItem", "position": 1, "name": "Home", "item": SITE.url }
  ];

  let pos = 2;
  for (let i = 0; i < pathSegments.length; i++) {
    const seg = pathSegments[i];
    if (!seg) continue;
    const crumbUrl = new URL('/' + pathSegments.slice(0, i + 1).join('/'), SITE.url).toString();
    breadcrumbItems.push({
      "@type": "ListItem",
      "position": pos++,
      "name": readable(seg, i),
      "item": crumbUrl
    });
  }

  schemaData.push({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumbItems
  });
}

// Services list
if (path === 'services') {
  const servicesPageSchema: SchemaObject = {
    ...baseSchema,
    "@type": "CollectionPage",
    "mainEntity": {
      "@type": "ItemList",
      "itemListElement": services.map((service: any, index: number) => ({
        "@type": "ListItem",
        "position": index + 1,
        "item": {
          "@type": "Service",
          "name": service.title,
          "description": service.description,
          "url": `${SITE.url}/services/${service.id}`,
          "provider": { "@id": `${SITE.url}#organization` }
        }
      }))
    }
  };
  schemaData.push(servicesPageSchema);
}

// Individual service page
if (pathSegments[0] === 'services' && currentService) {
  schemaData.push({
    ...baseSchema,
    "@type": "Service",
    "name": currentService.title,
    "description": currentService.description,
    "serviceType": currentService.title,
    "provider": { "@id": `${SITE.url}#organization` },
    "areaServed": { "@type": "Country", "name": "Ireland" }
  });
}

// Solutions list
if (path === 'solutions') {
  const solutionsPageSchema: SchemaObject = {
    ...baseSchema,
    "@type": "CollectionPage",
    "mainEntity": {
      "@type":"ItemList",
      "itemListElement": solutions.map((solution: any, index: number) => ({
        "@type": "ListItem",
        "position": index + 1,
        "item": {
          "@type": "Service",
          "name": solution.title,
          "description": solution.description,
          "url": `${SITE.url}/solutions/${solution.id}`,
          "provider": { "@id": `${SITE.url}#organization` }
        }
      }))
    }
  };
  schemaData.push(solutionsPageSchema);
}

// Individual solution page
if (pathSegments[0] === 'solutions' && currentSolution) {
  schemaData.push({
    ...baseSchema,
    "@type": "Service",
    "name": currentSolution.title,
    "description": currentSolution.description,
    "serviceType": currentSolution.title,
    "provider": { "@id": `${SITE.url}#organization` },
    "areaServed": { "@type": "Country", "name": "Ireland" }
  });
}

// Portfolio list
if (path === 'portfolio') {
  const portfolioPageSchema: SchemaObject = {
    ...baseSchema,
    "@type": "CollectionPage",
    "mainEntity": {
      "@type": "ItemList",
      "itemListElement": portfolioProjects.map((project: any, index: number) => ({
        "@type":"ListItem",
        "position": index + 1,
        "item": {
          "@type":"CreativeWork",
          "name": project.title,
          "description": project.description,
          "url": `${SITE.url}/portfolio/${project.id}`,
          "image": project.image?.startsWith('http') ? project.image : `${SITE.url}${project.image}`,
          "datePublished": project.completionDate,
          "creator": { "@id": `${SITE.url}#organization` }
        }
      }))
    }
  };
  schemaData.push(portfolioPageSchema);
}

// Individual portfolio item
if (pathSegments[0] === 'portfolio' && currentProject) {
  const projectImageUrl =
    currentProject.image?.startsWith('http') ? currentProject.image : `${SITE.url}${currentProject.image}`;

  const projectSchema: SchemaObject = {
    ...baseSchema,
    "@type": "CreativeWork",
    "headline": currentProject.title,
    "description": currentProject.description,
    "datePublished": currentProject.completionDate,
    "image": projectImageUrl,
    "creator": { "@id": `${SITE.url}#organization` }
  };

  if (currentProject.testimonial) {
    projectSchema.review = {
      "@type": "Review",
      "reviewBody": currentProject.testimonial.quote,
      "author": { "@type": "Person", "name": currentProject.testimonial.author }
    };
  }

  if (currentProject.website) {
    projectSchema.mainEntity = {
      "@type": "WebSite",
      "name": currentProject.title,
      "url": currentProject.website.startsWith('http')
        ? currentProject.website
        : `https://${currentProject.website}`,
      "description": currentProject.longDescription || currentProject.description
    };
  }

  schemaData.push(projectSchema);
}

// About / Contact
if (path === 'about') {
  schemaData.push({
    ...baseSchema,
    "@type": "AboutPage",
    "mainEntity": { "@id": `${SITE.url}#organization` }
  });
}
if (path === 'contact') {
  schemaData.push({
    ...baseSchema,
    "@type": "ContactPage",
    "mainEntity": { "@id": `${SITE.url}#organization` }
  });
}

// SUITES: Individual suite page -> Service + Offers + FAQ
if (pathSegments[0] === 'suites' && currentSuite) {
  // Expecting pricing fields: setup, launch, grow, pro (numbers or strings)
  const pricing = currentSuite.pricing ?? {};
  const priceNum = (v: any) => {
    if (typeof v === 'number') return v;
    if (typeof v === 'string') return Number(v.replace(/[^\d.]/g, '')) || undefined;
    return undefined;
  };

  const offers = [
    { name: "Setup fee", price: priceNum(pricing.setup), periodicity: "ONE_TIME" },
    { name: "Launch",    price: priceNum(pricing.launch), periodicity: "P1M" },
    { name: "Grow",      price: priceNum(pricing.grow),   periodicity: "P1M" },
    { name: "Pro",       price: priceNum(pricing.pro),    periodicity: "P1M" },
  ].filter(o => o.price !== undefined);

  const serviceSchema: SchemaObject = {
    "@context":"https://schema.org",
    "@type":"Service",
    "name": `${currentSuite.name} – Fully Managed ${currentSuite.targetSector} Websites`,
    "description": currentSuite.metaDescription || `Fully managed ${currentSuite.targetSector} websites in Ireland with transparent pricing.`,
    "serviceType": currentSuite.name,
    "provider": { "@id": `${SITE.url}#organization` },
    "areaServed": { "@type":"Country","name":"Ireland" },
    "hasOfferCatalog": {
      "@type": "OfferCatalog",
      "name": `${currentSuite.name} Plans`,
      "itemListElement": offers.map((o, idx) => ({
        "@type":"Offer",
        "name": o.name,
        "priceCurrency":"EUR",
        "price": o.price,
        "sku": `${currentSuite.id}-${o.name.toLowerCase().replace(/\s+/g,'-')}`,
        "eligibleRegion":"IE",
        "priceSpecification": {
          "@type":"PriceSpecification",
          "priceCurrency":"EUR",
          "price": o.price,
          ...(o.periodicity !== "ONE_TIME"
            ? { "billingDuration": o.periodicity, "unitText": "MON" }
            : { "validFor":"P0D" })
        },
        "seller": { "@id": `${SITE.url}#organization` },
        "position": idx + 1
      }))
    }
  };
  schemaData.push(serviceSchema);

  // FAQPage (use suite.faqs if provided)
  const faqs = (currentSuite.faqs && Array.isArray(currentSuite.faqs) ? currentSuite.faqs : [
    { q: "How fast can we launch?", a: "Most sites go live in 21 days with our Launch plan." },
    { q: "Is hosting included?", a: "Yes. Hosting, backups, security, and updates are included in all plans." },
    { q: "Can you migrate our existing site?", a: "Yes. We migrate content, set redirects, and preserve SEO." }
  ]);

  schemaData.push({
    "@context":"https://schema.org",
    "@type":"FAQPage",
    "mainEntity": faqs.map((f: any) => ({
      "@type":"Question",
      "name": f.q,
      "acceptedAnswer": { "@type":"Answer", "text": f.a }
    }))
  });
}

// Clean null/empty fields
const cleanSchema = (obj: any): any => {
  if (!obj) return null;
  if (Array.isArray(obj)) return obj.map(cleanSchema).filter(Boolean);
  if (obj && typeof obj === 'object') {
    return Object.fromEntries(
      Object.entries(obj)
        .filter(([_, v]) => v !== null && v !== undefined && v !== '')
        .map(([k, v]) => [k, cleanSchema(v)])
    );
  }
  return obj;
};

const schemaJson = JSON.stringify(cleanSchema(schemaData));
---

<!-- Meta/OG/Twitter via astro-seo -->
<AstroSEO
  title={title}
  description={description}
  canonical={canonical}
  openGraph={{
    basic: {
      title,
      type: type || (schemaType === "Service" ? "website" : schemaType.toLowerCase()),
      image,
      url: canonical,
    },
    optional: {
      siteName: SITE.name,
      description,
    }
  }}
  twitter={{
    creator: "@greenberry",
    site: "@greenberry",
    card: "summary_large_image",
  }}
  extend={{
    link: [
      { rel: "icon", href: "/favicon.ico" },
      { rel: "sitemap", href: "/sitemap-index.xml" }
    ],
    meta: [
      { name: "viewport", content: "width=device-width, initial-scale=1" },
      { name: "format-detection", content: "telephone=no" },
    ],
  }}
/>

<!-- Single JSON-LD block containing Organization + page-level schemas (Breadcrumbs, Service, FAQ, etc.) -->
<script is:inline type="application/ld+json" set:html={schemaJson} />
