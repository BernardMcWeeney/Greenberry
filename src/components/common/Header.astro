---
import Container from './Container.astro';
import Button from './Button.astro';
import { NAVIGATION } from '../../data/config';

const navItems = NAVIGATION.main;
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/95 dark:bg-gray-900/95 border-b border-gray-200 dark:border-gray-700 backdrop-blur-md">
  <Container>
    <div class="py-4 flex justify-between items-center">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-2 group">
        <div class="w-10 h-10 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="w-6 h-6 text-greenberry-600 dark:text-greenberry-400">
            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
              <circle cx="12" cy="12" r="10" />
              <path d="m10 10l4-3m-4 0l4 3" />
            </g>
          </svg>
        </div>
        <span class="font-bold text-xl text-gray-900 dark:text-white">
          <span class="text-greenberry-600 dark:text-greenberry-400">Greenberry</span>
        </span>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center gap-8">
        {navItems.map(item => (
          item.children ? (
            <!-- Dropdown Menu -->
            <div class="relative group">
              <button 
                class="font-medium text-gray-700 hover:text-greenberry-600 dark:text-gray-300 dark:hover:text-greenberry-400 transition-colors relative py-1 flex items-center gap-1"
                aria-expanded="false"
                aria-haspopup="true"
              >
                {item.name}
                <svg class="w-4 h-4 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              
              <!-- Dropdown Content -->
              <div class="absolute left-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                <div class="p-2">
                  {item.children.map(child => (
                    <a 
                      href={child.href} 
                      class="block px-4 py-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors group/item"
                    >
                      <div class="font-medium text-gray-900 dark:text-white group-hover/item:text-greenberry-600 dark:group-hover/item:text-greenberry-400 transition-colors">
                        {child.name}
                      </div>
                      {child.description && (
                        <div class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                          {child.description}
                        </div>
                      )}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <!-- Regular Menu Item -->
            <a 
              href={item.href} 
              class="font-medium text-gray-700 hover:text-greenberry-600 dark:text-gray-300 dark:hover:text-greenberry-400 transition-colors relative group py-1"
            >
              {item.name}
              <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-greenberry-500 group-hover:w-full transition-all duration-300"></span>
            </a>
          )
        ))}
        <div class="flex items-center gap-4 ml-4">
          
          
          <Button 
            href="https://billing.stripe.com/p/login/14k3eLfKQ9Bi4ladQQ" 
            variant="outline"
            size="sm"
            class="border-2 border-greenberry-600 text-greenberry-600 hover:bg-greenberry-50 dark:border-greenberry-400 dark:text-greenberry-400 dark:hover:bg-gray-800"
          >
            Client Portal
          </Button>
          <Button href="/contact" variant="primary" size="sm">
            Get Started
            <span class="ml-1">â†’</span>
          </Button>
        </div>
      </nav>

      <!-- Mobile header controls -->
      <div class="flex items-center gap-4 md:hidden">
        <!-- Dark Mode Toggle (Mobile) -->
        <button 
          id="theme-toggle-mobile" 
          class="p-2 text-gray-600 hover:text-greenberry-600 dark:text-gray-300 dark:hover:text-greenberry-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="Toggle dark mode"
        >
          <!-- Sun icon (shown in dark mode) -->
          <svg class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
          </svg>
          <!-- Moon icon (shown in light mode) -->
          <svg class="w-5 h-5 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
        </button>
        
        <!-- Mobile menu toggle -->
        <button 
          id="menu-toggle"
          class="p-2 text-gray-600 hover:text-greenberry-600 dark:text-gray-300 dark:hover:text-greenberry-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path id="menu-icon-bars" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            <path id="menu-icon-close" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" class="hidden"></path>
          </svg>
        </button>
      </div>
    </div>
  </Container>
</header>

<!-- Mobile Navigation -->
<div id="mobile-menu" class="fixed inset-0 md:hidden bg-white dark:bg-gray-900 hidden z-40 top-[73px]">
  <div class="h-full overflow-y-auto px-4 py-6">
    <nav class="flex flex-col space-y-2">
      {navItems.map((item) => (
        item.children ? (
          <!-- Mobile Dropdown -->
          <div class="mobile-dropdown">
            <button 
              class="w-full flex items-center justify-between font-medium text-gray-800 hover:text-greenberry-600 dark:text-gray-200 dark:hover:text-greenberry-400 transition-colors text-lg py-2 mobile-dropdown-toggle"
              aria-expanded="false"
            >
              {item.name}
              <svg class="w-5 h-5 transition-transform mobile-dropdown-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div class="mobile-dropdown-content hidden pl-4 py-2 space-y-2">
              {item.children.map(child => (
                <a 
                  href={child.href} 
                  class="block font-normal text-gray-600 hover:text-greenberry-600 dark:text-gray-400 dark:hover:text-greenberry-400 transition-colors py-1"
                >
                  {child.name}
                </a>
              ))}
            </div>
          </div>
        ) : (
          <!-- Regular Mobile Menu Item -->
          <a 
            href={item.href} 
            class="font-medium text-gray-800 hover:text-greenberry-600 dark:text-gray-200 dark:hover:text-greenberry-400 transition-colors text-lg py-2 block"
          >
            {item.name}
          </a>
        )
      ))}
    </nav>
    <div class="flex flex-col gap-3 pt-5 mt-5 border-t border-gray-200 dark:border-gray-700">
      <Button 
        href="https://billing.stripe.com/p/login/14k3eLfKQ9Bi4ladQQ" 
        variant="outline"
        size="md"
        block={true}
        class="border-2 border-greenberry-600 text-greenberry-600 hover:bg-greenberry-50 dark:border-greenberry-400 dark:text-greenberry-400 dark:hover:bg-gray-800"
      >
        Customer Portal
      </Button>
      <Button href="/contact" variant="primary" size="md" block={true}>
        Get Started
      </Button>
    </div>
  </div>
</div>

<script>
  // Mobile menu toggle
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIconBars = document.getElementById('menu-icon-bars');
  const menuIconClose = document.getElementById('menu-icon-close');
  const html = document.documentElement;

  if (menuToggle && mobileMenu) {
    menuToggle.addEventListener('click', () => {
      if (mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.remove('hidden');
        html.classList.add('overflow-hidden');
        menuIconBars?.classList.add('hidden');
        menuIconClose?.classList.remove('hidden');
      } else {
        mobileMenu.classList.add('hidden');
        html.classList.remove('overflow-hidden');
        menuIconBars?.classList.remove('hidden');
        menuIconClose?.classList.add('hidden');
      }
    });
  }

  // Close mobile menu on link click
  document.querySelectorAll('#mobile-menu a').forEach(link => {
    link.addEventListener('click', () => {
      if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.add('hidden');
        html.classList.remove('overflow-hidden');
        menuIconBars?.classList.remove('hidden');
        menuIconClose?.classList.add('hidden');
      }
    });
  });

  // Mobile dropdown toggles
  document.querySelectorAll('.mobile-dropdown-toggle').forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      const dropdown = toggle.closest('.mobile-dropdown');
      const content = dropdown?.querySelector('.mobile-dropdown-content');
      const icon = dropdown?.querySelector('.mobile-dropdown-icon');
      
      if (content && icon) {
        const isHidden = content.classList.contains('hidden');
        
        if (isHidden) {
          content.classList.remove('hidden');
          icon.style.transform = 'rotate(180deg)';
          toggle.setAttribute('aria-expanded', 'true');
        } else {
          content.classList.add('hidden');
          icon.style.transform = 'rotate(0deg)';
          toggle.setAttribute('aria-expanded', 'false');
        }
      }
    });
  });

  // Dark mode toggle
  function setupThemeToggle(buttonId) {
    const themeToggle = document.getElementById(buttonId);
    
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        const isDark = document.documentElement.classList.contains('dark');
        
        if (isDark) {
          document.documentElement.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
      });
    }
  }

  // Setup both toggles
  setupThemeToggle('theme-toggle');
  setupThemeToggle('theme-toggle-mobile');

  // Handle resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768 && mobileMenu && !mobileMenu.classList.contains('hidden')) {
      mobileMenu.classList.add('hidden');
      html.classList.remove('overflow-hidden');
      menuIconBars?.classList.remove('hidden');
      menuIconClose?.classList.add('hidden');
    }
  });

  // Close desktop dropdowns when clicking outside
  document.addEventListener('click', (e) => {
    const dropdowns = document.querySelectorAll('.group');
    dropdowns.forEach(dropdown => {
      if (!dropdown.contains(e.target as Node)) {
        const button = dropdown.querySelector('button');
        if (button) {
          button.setAttribute('aria-expanded', 'false');
        }
      }
    });
  });
</script>

<style>
  /* Ensure dropdowns appear above other content */
  .group:hover .group-hover\:opacity-100 {
    z-index: 9999;
  }
  
  /* Better mobile dropdown animations */
  .mobile-dropdown-content {
    transition: all 0.3s ease;
    max-height: 0;
    overflow: hidden;
  }
  
  .mobile-dropdown-content:not(.hidden) {
    max-height: 500px;
  }
  
  /* Smooth icon rotation */
  .mobile-dropdown-icon {
    transition: transform 0.2s ease;
  }
</style>