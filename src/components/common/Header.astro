---
import Container from './Container.astro';
import Button from './Button.astro';
import { NAVIGATION } from '../../config';

const navItems = NAVIGATION.main;
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/95 dark:bg-gray-900/95 border-b border-gray-200 dark:border-gray-800 backdrop-blur-md shadow-sm">
  <Container>
    <div class="py-4 flex justify-between items-center">
      <!-- Logo with improved animation -->
      <a href="/" class="flex items-center gap-2 group">
        <div class="w-10 h-10 rounded-lg flex items-center justify-center text-greenberry-600 dark:text-greenberry-400 group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-sm">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="w-6 h-6 text-greenberry-600 dark:text-greenberry-400 group-hover:animate-pulse">
                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                    <circle cx="12" cy="12" r="10" />
                    <path d="m10 10l4-3m-4 0l4 3" />
                </g>
            </svg>
        </div>
        <span class="font-bold text-xl text-gray-900 dark:text-white">
          <span class="text-greenberry-600 dark:text-greenberry-400 relative inline-block">
            Greenberry
            <span class="absolute -bottom-1 left-0 w-full h-0.5 bg-greenberry-500/40 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></span>
          </span>
        </span>
      </a>

      <!-- Desktop Navigation with hover effects -->
      <nav class="hidden md:flex items-center gap-8">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class="font-medium text-gray-700 hover:text-greenberry-600 dark:text-gray-200 dark:hover:text-greenberry-400 transition-colors relative group py-1"
          >
            {item.name}
            <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-greenberry-500 group-hover:w-full transition-all duration-300"></span>
          </a>
        ))}
        <div class="flex items-center gap-4 ml-4">
          <!-- Dark Mode Toggle -->
          <button 
            id="theme-toggle" 
            class="p-2 text-gray-600 hover:text-greenberry-600 dark:text-gray-300 dark:hover:text-greenberry-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors focus:outline-none relative"
            aria-label="Toggle dark mode"
          >
            <i class="fa-solid fa-sun hidden dark:block text-xl"></i>
            <i class="fa-solid fa-moon block dark:hidden text-xl"></i>
          </button>
          
          <Button 
            href="https://billing.stripe.com/p/login/14k3eLfKQ9Bi4ladQQ" 
            variant="outline"
            size="sm"
            class="border-2 border-greenberry-600 text-greenberry-600 hover:bg-greenberry-50 dark:border-greenberry-500 dark:text-greenberry-400 dark:hover:bg-gray-800 transform hover:scale-105"
          >
            Customer Portal
          </Button>
          <Button href="/contact" variant="primary" size="sm" class="transform hover:scale-105 shadow-md hover:shadow-lg hover:shadow-greenberry-500/20">
            Get Started
            <span class="ml-1 opacity-80 group-hover:translate-x-1 transition-transform duration-300">â†’</span>
          </Button>
        </div>
      </nav>

      <!-- Mobile header controls -->
      <div class="flex items-center gap-4 md:hidden">
        <!-- Dark Mode Toggle (Mobile) -->
        <button 
          id="theme-toggle-mobile" 
          class="p-2 text-gray-600 hover:text-greenberry-600 dark:text-gray-300 dark:hover:text-greenberry-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors focus:outline-none relative"
          aria-label="Toggle dark mode"
        >
          <i class="fa-solid fa-sun hidden dark:block text-xl"></i>
          <i class="fa-solid fa-moon block dark:hidden text-xl"></i>
        </button>
        
        <!-- Mobile menu toggle -->
        <button 
          id="menu-toggle"
          class="p-2 text-gray-600 hover:text-greenberry-600 rounded-lg hover:bg-gray-100 focus:outline-none dark:text-gray-300 dark:hover:bg-gray-800 transition-colors"
          aria-label="Toggle mobile menu"
        >
          <i id="menu-icon" class="fa-solid fa-bars text-xl"></i>
        </button>
      </div>
    </div>
  </Container>
</header>

<!-- Mobile Navigation - Fixed Position Overlay -->
<div id="mobile-menu" class="fixed inset-0 md:hidden bg-white dark:bg-gray-900 hidden z-40 top-[73px]">
  <div class="h-full overflow-y-auto px-4 py-6">
    <nav class="flex flex-col space-y-5">
      {navItems.map((item) => (
        <a 
          href={item.href} 
          class="font-medium text-gray-800 hover:text-greenberry-600 dark:text-gray-200 dark:hover:text-greenberry-400 transition-colors text-lg px-1 flex items-center"
        >
          {item.name}
          <span class="ml-auto text-gray-400 text-sm">
            <i class="fa-solid fa-chevron-right"></i>
          </span>
        </a>
      ))}
    </nav>
    <div class="flex flex-col gap-3 pt-5 mt-5 border-t border-gray-100 dark:border-gray-800">
      <Button 
        href="/customer-portal" 
        variant="outline"
        size="md"
        block={true}
        class="border-2 border-greenberry-600 text-greenberry-600 hover:bg-greenberry-50 dark:border-greenberry-500 dark:text-greenberry-400 dark:hover:bg-gray-800"
      >
        Customer Portal
      </Button>
      <Button href="/contact" variant="primary" size="md" block={true} class="w-full shadow-md hover:shadow-lg hover:shadow-greenberry-500/20">
        Get Started
        <i class="fa-solid fa-arrow-right ml-2"></i>
      </Button>
    </div>
  </div>
</div>

<script>
  // Simple mobile menu toggle
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIcon = document.getElementById('menu-icon');
  const html = document.documentElement;

  if (menuToggle && mobileMenu && menuIcon) {
    menuToggle.addEventListener('click', () => {
      // Toggle menu visibility
      if (mobileMenu.classList.contains('hidden')) {
        // Open menu
        mobileMenu.classList.remove('hidden');
        html.classList.add('overflow-hidden');
        menuIcon.classList.remove('fa-bars');
        menuIcon.classList.add('fa-xmark');
      } else {
        // Close menu
        mobileMenu.classList.add('hidden');
        html.classList.remove('overflow-hidden');
        menuIcon.classList.remove('fa-xmark');
        menuIcon.classList.add('fa-bars');
      }
    });
  }

  // Add click event listeners to all mobile menu links to close the menu
  document.querySelectorAll('#mobile-menu a').forEach(link => {
    link.addEventListener('click', () => {
      if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
        // Close menu
        mobileMenu.classList.add('hidden');
        html.classList.remove('overflow-hidden');
        if (menuIcon) {
          menuIcon.classList.remove('fa-xmark');
          menuIcon.classList.add('fa-bars');
        }
      }
    });
  });

  // Dark mode toggle functionality
  function setupThemeToggle(buttonId) {
    const themeToggle = document.getElementById(buttonId);
    
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        // Toggle dark mode
        if (document.documentElement.classList.contains('dark')) {
          document.documentElement.classList.remove('dark');
          localStorage.theme = 'light';
        } else {
          document.documentElement.classList.add('dark');
          localStorage.theme = 'dark';
        }
        
        // Add ripple effect
        const ripple = document.createElement('span');
        ripple.classList.add('ripple-effect');
        themeToggle.appendChild(ripple);
        
        // Remove ripple after animation
        setTimeout(() => {
          ripple.remove();
        }, 1000);
      });
    }
  }
  
  // Setup both desktop and mobile dark mode toggles
  setupThemeToggle('theme-toggle');
  setupThemeToggle('theme-toggle-mobile');
  
  // Initialize dark mode based on system preference or saved setting
  const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
  
  // Set dark mode based on local storage or system preference
  if (localStorage.theme === 'dark' || (!('theme' in localStorage) && darkModeMediaQuery.matches)) {
    document.documentElement.classList.add('dark');
  } else {
    document.documentElement.classList.remove('dark');
  }
  
  // Listen for system dark mode preference changes
  darkModeMediaQuery.addEventListener('change', (e) => {
    if (!('theme' in localStorage)) {
      if (e.matches) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }
  });

  // Handle resize to properly reset menu state on desktop view
  window.addEventListener('resize', () => {
    const isDesktopView = window.innerWidth >= 768; // 768px is where the md: breakpoint starts
    
    if (isDesktopView && mobileMenu && !mobileMenu.classList.contains('hidden')) {
      // Reset menu state
      mobileMenu.classList.add('hidden');
      
      // Reset menu icon
      if (menuIcon) {
        menuIcon.classList.remove('fa-xmark');
        menuIcon.classList.add('fa-bars');
      }
      
      // Re-enable body scroll
      html.classList.remove('overflow-hidden');
    }
  });
</script>

<style>
  /* Ripple effect for theme toggle */
  .ripple-effect {
    position: absolute;
    border-radius: 50%;
    background-color: rgba(34, 197, 94, 0.2);
    width: 100%;
    height: 100%;
    transform: scale(0);
    animation: ripple 1s linear;
    top: 0;
    left: 0;
    pointer-events: none;
  }
  
  @keyframes ripple {
    to {
      transform: scale(2.5);
      opacity: 0;
    }
  }
</style>