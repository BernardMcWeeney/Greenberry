---
import Container from '../common/Container.astro';
import Badge from '../ui/Badge.astro';
import { fetchWithAssets } from '../../utils/api';

// Fetch testimonials from the CMS with resolved image URLs
const testimonials = await fetchWithAssets('testimonials', ['image']);

// Calculate average Google review rating
const googleRating = 4.9;
const totalReviews = 87;
---

<section class="section-padding bg-white dark:bg-gray-900 relative overflow-hidden pb-12 sm:pb-16">
  <!-- Background elements for depth -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute top-0 right-0 w-1/3 h-1/3 bg-greenberry-500/10 rounded-full filter blur-3xl opacity-50"></div>
    <div class="absolute bottom-0 left-0 w-1/3 h-1/3 bg-greenberry-400/10 rounded-full filter blur-3xl opacity-40"></div>
  </div>
  
  <Container>
    <div class="max-w-3xl mx-auto text-center mb-12 relative z-10">
      <div class="badge-wrapper">
        <Badge text="CLIENT TESTIMONIALS" variant="primary" size="md" />
      </div>
      <h2 class="heading-primary">
        What Our Clients Say
      </h2>
    </div>
    
    <!-- Testimonial slider with navigation -->
    <div class="testimonial-outer-container relative mx-auto">
      <!-- Navigation Arrows - Absolutely positioned relative to outer container -->
      <button id="prev-btn" class="absolute left-0 top-1/2 transform -translate-y-1/2 z-20 bg-white dark:bg-gray-800 rounded-full p-2 shadow-md">
        <i class="fas fa-chevron-left text-gray-500 dark:text-gray-400"></i>
      </button>
      
      <button id="next-btn" class="absolute right-0 top-1/2 transform -translate-y-1/2 z-20 bg-white dark:bg-gray-800 rounded-full p-2 shadow-md">
        <i class="fas fa-chevron-right text-gray-500 dark:text-gray-400"></i>
      </button>
      
      <!-- Testimonial Slider Container -->
      <div class="testimonial-slider-container relative w-full overflow-hidden">
        <!-- Testimonial Slide Track -->
        <div id="testimonial-track" class="flex transition-transform duration-500">
          {testimonials.map((testimonial) => (
            <div class="testimonial-slide flex-shrink-0 px-3">
              <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm h-full flex flex-col border border-gray-100 dark:border-gray-700">
                {/* Rating Stars */}
                <div class="flex text-yellow-400 mb-4">
                  {[...Array(5)].map((_, i) => (
                    <span class="mr-0.5">
                      <i class={`fa-${i < testimonial.rating ? 'solid' : 'regular'} fa-star`}></i>
                    </span>
                  ))}
                  <span class="text-gray-400 dark:text-gray-500 text-xs ml-2 font-medium mt-0.5">Verified Client</span>
                </div>
                
                {/* Quote Content */}
                <div class="mb-6 flex-grow">
                  <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
                    "{testimonial.content}"
                  </p>
                </div>
                
                {/* Client Info */}
                <div class="flex items-start mt-auto pt-4 border-t border-gray-100 dark:border-gray-700">
                  <div class="w-12 h-12 rounded-full overflow-hidden mr-4 bg-gray-100 dark:bg-gray-700 flex-shrink-0">
                    <img 
                      src={testimonial.image_url} 
                      alt={testimonial.author} 
                      class="w-full h-full object-cover"
                      loading="lazy"
                      decoding="async"
                    />
                  </div>
                  <div>
                    <h4 class="font-medium text-gray-900 dark:text-white">
                      {testimonial.author}
                    </h4>
                    <p class="text-sm text-gray-500 dark:text-gray-400 mt-0.5">
                      {testimonial.position}
                    </p>
                    <p class="text-sm text-greenberry-600 dark:text-greenberry-500 font-medium mt-0.5">
                      {testimonial.organisation}
                    </p>
                    
                    {testimonial.url && (
                      <a 
                        href={`https://${testimonial.url}`} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="inline-flex items-center mt-2 text-xs text-greenberry-600 dark:text-greenberry-400 hover:text-greenberry-700 dark:hover:text-greenberry-300"
                      >
                        <i class="fas fa-globe text-greenberry-500 mr-1.5 text-xs"></i>
                        <span>{testimonial.url}</span>
                        <i class="fas fa-external-link-alt text-xs ml-1 opacity-70"></i>
                      </a>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Dots Navigation -->
      <div class="dots-container flex justify-center mt-6 space-x-2">
        {testimonials.map((_, index) => (
          <button 
            class="dot w-2 h-2 rounded-full bg-gray-300 dark:bg-gray-700" 
            data-index={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </Container>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Get DOM elements
    const track = document.getElementById('testimonial-track');
    const slides = document.querySelectorAll('.testimonial-slide');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = document.querySelectorAll('.dot');
    const sliderContainer = document.querySelector('.testimonial-slider-container');
    
    if (!track || slides.length === 0) return;
    
    // Variables
    let currentIndex = 0;
    let slideWidth;
    let slidesToShow;
    let autoplayTimeout;
    let isTransitioning = false;
    const slideCount = slides.length;
    
    // Setup for true infinite loop
    function setupInfiniteLoop() {
      // Clone all slides
      const originalSlides = Array.from(slides);
      originalSlides.forEach(slide => {
        const clone = slide.cloneNode(true);
        track.appendChild(clone);
      });
      
      // Position at first slide
      moveToSlide(0, false);
    }
    
    // Calculate slide dimensions
    function calculateDimensions() {
      track.style.transition = 'none';
      
      // Determine slides to show based on screen width
      if (window.innerWidth >= 1024) {
        slidesToShow = 3; // Desktop
      } else if (window.innerWidth >= 640) {
        slidesToShow = 2; // Tablet
      } else {
        slidesToShow = 1; // Mobile
      }
      
      // Calculate available width (container width minus padding)
      const containerWidth = sliderContainer.clientWidth;
      slideWidth = containerWidth / slidesToShow;
      
      // Set widths for all slides
      document.querySelectorAll('.testimonial-slide').forEach(slide => {
        slide.style.width = `${slideWidth}px`;
      });
      
      // Set track width
      track.style.width = `${slideWidth * track.children.length}px`;
      
      // Maintain position
      moveToSlide(currentIndex, false);
      
      setTimeout(() => {
        track.style.transition = 'transform 500ms ease';
      }, 50);
    }
    
    // Move to specific slide
    function moveToSlide(index, animate = true) {
      if (isTransitioning) return;
      
      track.style.transition = animate ? 'transform 500ms ease' : 'none';
      
      const position = -index * slideWidth;
      track.style.transform = `translateX(${position}px)`;
      
      currentIndex = index;
      
      updateActiveDot();
      
      if (animate) {
        isTransitioning = true;
        setTimeout(() => {
          isTransitioning = false;
          
          // If at the end, loop back to the start (instantly, no animation)
          if (currentIndex >= slideCount) {
            moveToSlide(0, false);
          }
          // If before the beginning, loop to the end (instantly, no animation)
          else if (currentIndex < 0) {
            moveToSlide(slideCount - 1, false);
          }
        }, 500);
      }
    }
    
    // Update active dot
    function updateActiveDot() {
      // Normalize the index for the dot (based on visible slide)
      const normalizedIndex = ((currentIndex % slideCount) + slideCount) % slideCount;
      
      dots.forEach((dot, i) => {
        if (i === normalizedIndex) {
          dot.classList.add('bg-greenberry-500', 'dark:bg-greenberry-400');
          dot.classList.remove('bg-gray-300', 'dark:bg-gray-700');
        } else {
          dot.classList.remove('bg-greenberry-500', 'dark:bg-greenberry-400');
          dot.classList.add('bg-gray-300', 'dark:bg-gray-700');
        }
      });
    }
    
    // Autoplay functions
    function startAutoplay() {
      stopAutoplay();
      autoplayTimeout = setTimeout(() => {
        moveToSlide(currentIndex + 1);
        startAutoplay();
      }, 4000);
    }
    
    function stopAutoplay() {
      if (autoplayTimeout) clearTimeout(autoplayTimeout);
    }
    
    // Initialize slider
    function initSlider() {
      setupInfiniteLoop();
      calculateDimensions();
      updateActiveDot();
      
      // Event listeners
      nextBtn.addEventListener('click', () => {
        stopAutoplay();
        moveToSlide(currentIndex + 1);
        startAutoplay();
      });
      
      prevBtn.addEventListener('click', () => {
        stopAutoplay();
        moveToSlide(currentIndex - 1);
        startAutoplay();
      });
      
      // Dot navigation
      dots.forEach((dot, i) => {
        dot.addEventListener('click', () => {
          stopAutoplay();
          moveToSlide(i);
          startAutoplay();
        });
      });
      
      // Pause/resume on interaction
      track.addEventListener('mouseenter', stopAutoplay);
      track.addEventListener('touchstart', stopAutoplay, { passive: true });
      track.addEventListener('mouseleave', startAutoplay);
      track.addEventListener('touchend', startAutoplay);
      
      // Handle window resize
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(calculateDimensions, 200);
      });
      
      // Handle visibility change
      document.addEventListener('visibilitychange', () => {
        document.hidden ? stopAutoplay() : startAutoplay();
      });
      
      // Fix for Safari image loading
      document.querySelectorAll('.testimonial-slide img').forEach(img => {
        img.onerror = function() {
          this.src = 'https://randomuser.me/api/portraits/lego/1.jpg';
        };
        
        if (img.complete && img.naturalHeight === 0) {
          img.src = 'https://randomuser.me/api/portraits/lego/1.jpg';
        }
      });
      
      startAutoplay();
    }
    
    initSlider();
  });
</script>

<style>
  /* Outer container to position navigation buttons correctly */
  .testimonial-outer-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    padding: 0 40px;
  }
  
  /* Inner slider container */
  .testimonial-slider-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    padding: 0;
  }
  
  /* Navigation buttons */
  #prev-btn, #next-btn {
    opacity: 0.7;
    transition: opacity 0.3s ease;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  #prev-btn:hover, #next-btn:hover {
    opacity: 1;
  }
  
  /* Dot indicators */
  .dot {
    transition: background-color 0.3s ease;
  }
  
  /* Mobile adjustments */
  @media (max-width: 640px) {
    .testimonial-outer-container {
      padding: 0 30px;
    }
    
    #prev-btn, #next-btn {
      width: 32px;
      height: 32px;
    }
  }
</style>