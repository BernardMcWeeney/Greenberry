---
import Container from '../common/Container.astro';
import Badge from '../ui/Badge.astro';
import { fetchWithAssets } from '../../utils/api';

// Fetch testimonials from the CMS with resolved image URLs
const testimonials = await fetchWithAssets('testimonials', ['image']);

// Calculate average Google review rating
const googleRating = 4.9;
const totalReviews = 87;
---

<section class="section-padding bg-white dark:bg-gray-900 relative overflow-hidden pb-12 sm:pb-16">
  <!-- Background elements for depth -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute top-0 right-0 w-1/3 h-1/3 bg-greenberry-500/10 rounded-full filter blur-3xl opacity-50"></div>
    <div class="absolute bottom-0 left-0 w-1/3 h-1/3 bg-greenberry-400/10 rounded-full filter blur-3xl opacity-40"></div>
  </div>
  
  <Container>
    <div class="max-w-3xl mx-auto text-center mb-12 relative z-10">
      <div class="badge-wrapper">
        <Badge text="CLIENT TESTIMONIALS" variant="primary" size="md" />
      </div>
      <h2 class="heading-primary">
        What Our Clients Say
      </h2>
    </div>
    
    <!-- Full-width Testimonial Tapefeed with reduced margin spacing -->
    <div class="testimonial-tapefeed-container relative w-full overflow-hidden mt-8 mb-6">
      <div id="testimonial-tapefeed" class="flex space-x-6">
        {[...testimonials, ...testimonials].map((testimonial) => (
          <div class="testimonial-card flex-shrink-0" style="width: 400px;">
            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm h-full flex flex-col border border-gray-100 dark:border-gray-700">
              {/* Rating Stars */}
              <div class="flex text-yellow-400 mb-4">
                {[...Array(5)].map((_, i) => (
                  <span class="mr-0.5">
                    <i class={`fa-${i < testimonial.rating ? 'solid' : 'regular'} fa-star`}></i>
                  </span>
                ))}
                <span class="text-gray-400 dark:text-gray-500 text-xs ml-2 font-medium mt-0.5">Verified Client</span>
              </div>
              
              {/* Quote Content */}
              <div class="mb-6 flex-grow">
                <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
                  "{testimonial.content}"
                </p>
              </div>
              
              {/* Client Info */}
              <div class="flex items-start mt-auto pt-4 border-t border-gray-100 dark:border-gray-700">
                <div class="w-12 h-12 rounded-full overflow-hidden mr-4 bg-gray-100 dark:bg-gray-700 flex-shrink-0">
                  <img 
                    src={testimonial.image_url} 
                    alt={testimonial.author} 
                    class="w-full h-full object-cover"
                    onerror="this.src='https://randomuser.me/api/portraits/lego/1.jpg';"
                  />
                </div>
                <div>
                  <h4 class="font-medium text-gray-900 dark:text-white">
                    {testimonial.author}
                  </h4>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-0.5">
                    {testimonial.position}
                  </p>
                  <p class="text-sm text-greenberry-600 dark:text-greenberry-500 font-medium mt-0.5">
                    {testimonial.organisation}
                  </p>
                  
                  {testimonial.url && (
                    <a 
                      href={`https://${testimonial.url}`} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="inline-flex items-center mt-2 text-xs text-greenberry-600 dark:text-greenberry-400 hover:text-greenberry-700 dark:hover:text-greenberry-300"
                    >
                      <i class="fas fa-globe text-greenberry-500 mr-1.5 text-xs"></i>
                      <span>{testimonial.url}</span>
                      <i class="fas fa-external-link-alt text-xs ml-1 opacity-70"></i>
                    </a>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </Container>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const tapefeed = document.getElementById('testimonial-tapefeed');
    if (!tapefeed) return;
    
    // Clone the testimonials to ensure smooth looping
    const cloneItems = () => {
      const items = tapefeed.children;
      const itemsArray = Array.from(items);
      
      // Clone all items and append to tapefeed
      itemsArray.forEach(item => {
        const clone = item.cloneNode(true);
        tapefeed.appendChild(clone);
      });
    };
    
    // We've already duplicated the list in HTML, but add extra for safety
    cloneItems();
    
    // Calculate proper card width based on device width
    const calculateCardWidth = () => {
      if (window.innerWidth < 640) {
        // For mobile, use 85% of viewport width plus gap
        return (window.innerWidth * 0.85) + 24;
      } else {
        // For desktop use fixed width plus gap
        return 400 + 24;
      }
    };
    
    // Initialize scroll variables
    let scrollAmount = 0;
    let cardWidth = calculateCardWidth();
    let totalWidth = cardWidth * (tapefeed.children.length / 2);
    let animationFrameId = null;
    
    // Different speeds for mobile and desktop
    const getScrollSpeed = () => {
      return window.innerWidth < 768 ? 0.6 : 0.3; // Adjusted for better mobile experience
    };
    
    // Animation function
    const scrollTapefeed = () => {
      scrollAmount += getScrollSpeed();
      
      // Loop back seamlessly when we've scrolled half the content
      if (scrollAmount >= totalWidth) {
        scrollAmount = 0;
        tapefeed.style.transition = 'none';
        tapefeed.style.transform = `translateX(0px)`;
        
        // Force reflow to enable animation again
        tapefeed.offsetHeight;
        tapefeed.style.transition = 'transform 0.5s linear';
      }
      
      tapefeed.style.transform = `translateX(-${scrollAmount}px)`;
      animationFrameId = requestAnimationFrame(scrollTapefeed);
    };
    
    // Start the animation
    const startAnimation = () => {
      // Reset scroll position
      scrollAmount = 0;
      tapefeed.style.transform = `translateX(0px)`;
      
      // Recalculate widths
      cardWidth = calculateCardWidth();
      totalWidth = cardWidth * (tapefeed.children.length / 2);
      
      // Setup transition and start animation
      tapefeed.style.transition = 'transform 0.5s linear';
      animationFrameId = requestAnimationFrame(scrollTapefeed);
    };
    
    // Stop animation function
    const stopAnimation = () => {
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = null;
      }
    };
    
    // Start animation immediately
    startAnimation();
    
    // Adjust when window resizes
    let resizeTimeout;
    window.addEventListener('resize', () => {
      // Debounce resize events
      clearTimeout(resizeTimeout);
      
      // Stop animation during resize
      stopAnimation();
      
      // Restart animation after resize completes
      resizeTimeout = setTimeout(() => {
        startAnimation();
      }, 200);
    });
    
    // Pause animation when page is not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAnimation();
      } else {
        startAnimation();
      }
    });
    
    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      stopAnimation();
    });
  });
</script>

<style>
  /* Tapefeed container styling */
  .testimonial-tapefeed-container {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    margin-bottom: 1rem;
  }
  
  .testimonial-tapefeed-container::before,
  .testimonial-tapefeed-container::after {
    content: '';
    position: absolute;
    top: 0;
    width: 100px;
    height: 100%;
    z-index: 2;
    pointer-events: none;
  }
  
  .testimonial-tapefeed-container::before {
    left: 0;
    background: linear-gradient(to right, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0));
  }
  
  .testimonial-tapefeed-container::after {
    right: 0;
    background: linear-gradient(to left, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0));
  }
  
  :global(.dark) .testimonial-tapefeed-container::before {
    background: linear-gradient(to right, rgba(17, 24, 39, 0.9), rgba(17, 24, 39, 0));
  }
  
  :global(.dark) .testimonial-tapefeed-container::after {
    background: linear-gradient(to left, rgba(17, 24, 39, 0.9), rgba(17, 24, 39, 0));
  }
  
  /* Tape feed effect for cards */
  .testimonial-card {
    position: relative;
    margin-bottom: 0.5rem;
    min-height: 280px;
    display: flex;
  }
  
  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    .testimonial-card {
      width: 85vw !important;
      margin-bottom: 0.75rem;
    }
    
    .testimonial-tapefeed-container::before,
    .testimonial-tapefeed-container::after {
      width: 60px; /* Smaller gradient on mobile */
    }
  }
</style>