---
// src/components/home/Testimonials.astro
import Container from '../common/Container.astro';
import Badge from '../ui/Badge.astro';
import testimonials from '../../data/testimonial.ts';

// Define the character limit
const CHARACTER_LIMIT = 250;
---

<section class="section-padding bg-white dark:bg-neutral-900 relative overflow-hidden pb-12 sm:pb-16">
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute top-0 right-0 w-1/3 h-1/3 bg-greenberry-500/10 rounded-full filter blur-3xl opacity-50"></div>
    <div class="absolute bottom-0 left-0 w-1/3 h-1/3 bg-greenberry-400/10 rounded-full filter blur-3xl opacity-40"></div>
  </div>
  
  <Container>
    <div class="max-w-3xl mx-auto text-center mb-12 relative z-10">
      <div class="badge-wrapper">
        <Badge text="CLIENT TESTIMONIALS" variant="primary" size="md" />
      </div>
      <h2 class="heading-primary">
        What Our Clients Say
      </h2>
    </div>
    
    <div class="testimonial-outer-container relative mx-auto" aria-roledescription="carousel" aria-label="Client testimonials">
      <button 
        id="prev-btn" 
        class="absolute left-0 top-1/2 -translate-y-1/2 z-20 bg-white dark:bg-neutral-800 rounded-full p-2 shadow-md"
        aria-label="Previous testimonial"
      >
        <i class="fas fa-chevron-left text-neutral-500 dark:text-neutral-400" aria-hidden="true"></i>
      </button>
      
      <button 
        id="next-btn" 
        class="absolute right-0 top-1/2 -translate-y-1/2 z-20 bg-white dark:bg-neutral-800 rounded-full p-2 shadow-md"
        aria-label="Next testimonial"
      >
        <i class="fas fa-chevron-right text-neutral-500 dark:text-neutral-400" aria-hidden="true"></i>
      </button>
      
      <div class="testimonial-slider-container relative w-full overflow-hidden">
        <div id="testimonial-track" class="flex transition-transform duration-500" aria-live="polite">
          {testimonials.map((testimonial, index) => (
            <div class="testimonial-slide flex-shrink-0 px-3" aria-roledescription="slide" aria-label={`Testimonial ${index + 1} of ${testimonials.length}`}>
              <!-- Updated card wrapper: rounded-2xl, neutral borders, shadow-sm, consistent surfaces; no hover needed -->
              <div class="rounded-2xl p-6 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 shadow-sm h-full flex flex-col">
                {/* Rating Stars */}
                <div class="flex text-accent-orange-400 mb-4">
                  {Array.from({ length: 5 }).map(() => (
                    <span class="mr-0.5">
                      <i class="fa-solid fa-star" aria-hidden="true"></i>
                    </span>
                  ))}
                  {testimonial.verified && (
                    <span class="text-neutral-400 dark:text-neutral-500 text-xs ml-2 font-medium mt-0.5">Verified Client</span>
                  )}
                </div>
                
                {/* Quote Content */}
                <div class="mb-6 flex-grow">
                  <p class="text-neutral-700 dark:text-neutral-300 text-sm leading-relaxed">
                    "{testimonial.quote.length > CHARACTER_LIMIT 
                      ? testimonial.quote.substring(0, CHARACTER_LIMIT) + '...' 
                      : testimonial.quote}"
                  </p>
                </div>
                
                {/* Client Info */}
                <div class="flex items-start mt-auto pt-4 border-t border-neutral-200 dark:border-neutral-700">
                  <div class="w-12 h-12 rounded-full overflow-hidden mr-4 bg-neutral-100 dark:bg-neutral-700 flex-shrink-0">
                    {testimonial.avatar ? (
                      <img 
                        src={testimonial.avatar} 
                        alt={`Photo of ${testimonial.author}`} 
                        class="w-full h-full object-cover"
                        loading="lazy"
                        decoding="async"
                      />
                    ) : (
                      <div class="w-full h-full flex items-center justify-center bg-greenberry-100 dark:bg-greenberry-900 text-greenberry-600 dark:text-greenberry-400">
                        <i class="fa-solid fa-user" aria-hidden="true"></i>
                      </div>
                    )}
                  </div>
                  <div class="overflow-hidden flex-1 min-w-0">
                    <h3 class="font-medium text-neutral-900 dark:text-white text-base">
                      {testimonial.author}
                    </h3>
                    <p class="text-sm text-neutral-500 dark:text-neutral-400 mt-0.5">
                      {testimonial.position}
                    </p>
                    <p class="text-sm text-greenberry-600 dark:text-greenberry-500 font-medium mt-0.5">
                      {testimonial.company}
                    </p>
                    
                    {testimonial.website && (
                      <a 
                        href={`https://${testimonial.website}`} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="inline-flex items-center mt-2 text-xs text-greenberry-600 dark:text-greenberry-400 hover:text-greenberry-700 dark:hover:text-greenberry-300 website-link group"
                        aria-label={`Visit ${testimonial.company} website: ${testimonial.website}`}
                      >
                        <i class="fas fa-globe text-greenberry-500 mr-1.5 text-xs flex-shrink-0" aria-hidden="true"></i>
                        <span class="truncate max-w-full website-url">{testimonial.website}</span>
                        <i class="fas fa-external-link-alt text-xs ml-1 opacity-70 flex-shrink-0" aria-hidden="true"></i>
                      </a>
                    )}
                  </div>
                </div>
              </div>
              <!-- /card -->
            </div>
          ))}
        </div>
      </div>
      
      <div class="dots-container flex justify-center mt-6 space-x-3" role="tablist" aria-label="Testimonial navigation">
        {testimonials.map((_, index) => (
          <button 
            class="dot w-8 h-8 flex items-center justify-center" 
            data-index={index}
            aria-label={`Go to testimonial ${index + 1}`}
            role="tab"
            aria-selected={index === 0 ? "true" : "false"}
          >
            <span class="w-2 h-2 rounded-full bg-neutral-300 dark:bg-neutral-700"></span>
          </button>
        ))}
      </div>
    </div>
  </Container>
</section>

<script is:inline>
  // Replace only the slider JS with a more careful read-then-write flow.
  (function () {
    const track = document.getElementById('testimonial-track');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = Array.from(document.querySelectorAll('.dot'));
    const sliderContainer = document.querySelector('.testimonial-slider-container');

    if (!track || !sliderContainer) return;

    // Config
    const TRANSITION_MS = 500;
    const AUTOPLAY = true;
    const INTERVAL = 4000;

    // Get original slides (live NodeList snapshot)
    const originalSlides = Array.from(track.querySelectorAll('.testimonial-slide'));
    const originalCount = originalSlides.length;
    if (originalCount === 0) return;

    // State
    let slidesToShow = 1;
    let slideWidth = 0;
    let totalSlides = 0; // track.children.length after cloning
    let currentIndex = 0;
    let isTransitioning = false;
    let autoplayTimer = null;

    // Clone originals into a fragment and append once (no intermediate layouts)
    function appendClones() {
      if (track.dataset.cloned === 'true') return;
      const frag = document.createDocumentFragment();
      originalSlides.forEach(s => frag.appendChild(s.cloneNode(true)));
      track.appendChild(frag);
      track.dataset.cloned = 'true';
    }

    // Compute slidesToShow from viewport (cheap read)
    function computeSlidesToShow() {
      const w = window.innerWidth;
      if (w >= 1024) return 3;
      if (w >= 640) return 2;
      return 1;
    }

    // Calculate dims: READ containerWidth ONCE, then batch all writes in rAF.
    function calculateDimensions() {
      // Temporarily disable transition to avoid visible jumps during layout change
      track.style.transition = 'none';

      slidesToShow = computeSlidesToShow();

      // Single layout read (container width)
      const containerWidth = sliderContainer.clientWidth;
      slideWidth = Math.floor(containerWidth / slidesToShow); // keep ints for crispness

      // total slides (original + clones)
      totalSlides = track.children.length;

      // Batch all writes in one rAF to avoid read/write interleaving
      requestAnimationFrame(() => {
        // Set each slide width
        Array.from(track.querySelectorAll('.testimonial-slide')).forEach(slide => {
          slide.style.width = `${slideWidth}px`;
        });

        // Set track width in px
        track.style.width = `${slideWidth * totalSlides}px`;

        // Keep consistent transform style
        track.style.transition = `transform ${TRANSITION_MS}ms ease`;

        // Move to current index (no animate)
        moveToSlide(currentIndex, false);
      });
    }

    // Move to slide in pixel world (preserves original layout exactly)
    function moveToSlide(index, animate = true) {
      if (isTransitioning) return;

      track.style.transition = animate ? `transform ${TRANSITION_MS}ms ease` : 'none';

      const positionPx = -index * slideWidth;
      track.style.transform = `translateX(${positionPx}px)`;

      currentIndex = index;
      updateActiveDot();

      // ARIA updates (which don't cause layout reads that matter)
      Array.from(track.querySelectorAll('.testimonial-slide')).forEach((slide, idx) => {
        if (idx === ((currentIndex % originalCount) + originalCount) % originalCount) {
          slide.setAttribute('aria-current', 'true');
        } else {
          slide.setAttribute('aria-current', 'false');
        }
      });

      if (animate) {
        isTransitioning = true;
        setTimeout(() => {
          isTransitioning = false;
          // If we've animated into clones, snap back without animation
          if (currentIndex >= originalCount) {
            currentIndex = 0;
            track.style.transition = 'none';
            track.style.transform = `translateX(${0}px)`;
            // restore transition on next frame
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                track.style.transition = `transform ${TRANSITION_MS}ms ease`;
              });
            });
          } else if (currentIndex < 0) {
            currentIndex = originalCount - 1;
            track.style.transition = 'none';
            track.style.transform = `translateX(${ -currentIndex * slideWidth }px)`;
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                track.style.transition = `transform ${TRANSITION_MS}ms ease`;
              });
            });
          }
        }, TRANSITION_MS);
      }
    }

    function updateActiveDot() {
      const normalized = ((currentIndex % originalCount) + originalCount) % originalCount;
      dots.forEach((dot, i) => {
        const indicator = dot.querySelector('span');
        if (!indicator) return;
        if (i === normalized) {
          indicator.classList.add('bg-greenberry-500', 'dark:bg-greenberry-400');
          indicator.classList.remove('bg-neutral-300', 'dark:bg-neutral-700');
          dot.setAttribute('aria-selected', 'true');
        } else {
          indicator.classList.remove('bg-greenberry-500', 'dark:bg-greenberry-400');
          indicator.classList.add('bg-neutral-300', 'dark:bg-neutral-700');
          dot.setAttribute('aria-selected', 'false');
        }
      });
    }

    // Autoplay controls
    function startAutoplay() {
      if (!AUTOPLAY) return;
      stopAutoplay();
      autoplayTimer = setTimeout(() => {
        moveToSlide(currentIndex + 1);
        startAutoplay();
      }, INTERVAL);
    }
    function stopAutoplay() {
      if (autoplayTimer) {
        clearTimeout(autoplayTimer);
        autoplayTimer = null;
      }
    }

    // Wiring events (idempotent)
    function wireEvents() {
      if (nextBtn) nextBtn.addEventListener('click', () => { stopAutoplay(); moveToSlide(currentIndex + 1); startAutoplay(); });
      if (prevBtn) prevBtn.addEventListener('click', () => { stopAutoplay(); moveToSlide(currentIndex - 1); startAutoplay(); });

      if (prevBtn) prevBtn.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); prevBtn.click(); } });
      if (nextBtn) nextBtn.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); nextBtn.click(); } });

      dots.forEach((dot, i) => {
        dot.addEventListener('click', () => { stopAutoplay(); moveToSlide(i); startAutoplay(); });
        dot.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); dot.click(); } });
      });

      // Pause/resume on hover/touch
      track.addEventListener('mouseenter', stopAutoplay);
      track.addEventListener('mouseleave', startAutoplay);
      track.addEventListener('touchstart', stopAutoplay, { passive: true });
      track.addEventListener('touchend', startAutoplay);

      // Debounced resize: recalc if breakpoint or container changed
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
          // Recompute sizes (we only read window.innerWidth and container once)
          calculateDimensions();
        }, 150);
      });

      // Visibility change
      document.addEventListener('visibilitychange', () => {
        document.hidden ? stopAutoplay() : startAutoplay();
      });

      // Image fallback handling
      Array.from(track.querySelectorAll('.testimonial-slide img')).forEach(img => {
        img.addEventListener('error', function() {
          this.style.display = 'none';
          try {
            this.parentNode.innerHTML = '<div class="w-full h-full flex items-center justify-center bg-greenberry-100 dark:bg-greenberry-900 text-greenberry-600 dark:text-greenberry-400"><i class="fa-solid fa-user" aria-hidden="true"></i></div>';
          } catch (e) { /* ignore */ }
        });
      });
    }

    // Init flow
    appendClones();          // clone into fragment (no mid-layout)
    calculateDimensions();   // read container once, write widths in rAF
    wireEvents();
    updateActiveDot();
    startAutoplay();

    // expose for debugging if you want: window._gbTestimonials = { moveToSlide, calculateDimensions };
  })();
</script>

<style>
  /* Outer container to position navigation buttons correctly */
  .testimonial-outer-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    padding: 0 40px;
  }
  
  /* Inner slider container */
  .testimonial-slider-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    padding: 0;
  }
  
  /* Navigation buttons */
  #prev-btn, #next-btn {
    opacity: 0.7;
    transition: opacity 0.3s ease;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  #prev-btn:hover, #next-btn:hover {
    opacity: 1;
  }
  
  #prev-btn:focus, #next-btn:focus {
    outline: 2px solid #22c55e;
    opacity: 1;
  }
  
  /* Dot indicators - increased touch target size */
  .dot {
    transition: background-color 0.3s ease;
    cursor: pointer;
  }
  
  .dot:focus {
    outline: 2px solid #22c55e;
  }
  
  /* Website link styles - to prevent overflow */
  .website-link {
    display: inline-flex;
    align-items: center;
    max-width: 100%;
    overflow: hidden;
    white-space: nowrap;
  }
  
  .website-url {
    text-overflow: ellipsis;
    overflow: hidden;
  }
  
  /* Mobile adjustments */
  @media (max-width: 640px) {
    .testimonial-outer-container {
      padding: 0 30px;
    }
    
    #prev-btn, #next-btn {
      width: 32px;
      height: 32px;
    }
    
    /* Better website link handling on mobile */
    .website-link {
      width: 100%;
      max-width: 100%;
    }
    
    .website-url {
      max-width: calc(100% - 30px);
    }
  }
</style>
