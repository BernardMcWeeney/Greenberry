---
import Container from '../common/Container.astro';
import Badge from '../ui/Badge.astro';
import { fetchWithAssets } from '../../utils/api';

// Fetch testimonials from the CMS with resolved image URLs
const testimonials = await fetchWithAssets('testimonials', ['image']);

// Calculate average Google review rating
const googleRating = 4.9;
const totalReviews = 87;
---

<section class="section-padding bg-white dark:bg-gray-900 relative overflow-hidden pb-12 sm:pb-16">
  <!-- Background elements for depth -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute top-0 right-0 w-1/3 h-1/3 bg-greenberry-500/10 rounded-full filter blur-3xl opacity-50"></div>
    <div class="absolute bottom-0 left-0 w-1/3 h-1/3 bg-greenberry-400/10 rounded-full filter blur-3xl opacity-40"></div>
  </div>
  
  <Container>
    <div class="max-w-3xl mx-auto text-center mb-12 relative z-10">
      <div class="badge-wrapper">
        <Badge text="CLIENT TESTIMONIALS" variant="primary" size="md" />
      </div>
      <h2 class="heading-primary">
        What Our Clients Say
      </h2>
    </div>
    
    <!-- Testimonial Slider Container -->
    <div class="testimonial-slider-container relative w-full overflow-hidden">
      <!-- Navigation Arrows -->
      <button id="prev-btn" class="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-white dark:bg-gray-800 rounded-full p-2 shadow-md">
        <i class="fas fa-chevron-left text-gray-500 dark:text-gray-400"></i>
      </button>
      
      <button id="next-btn" class="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-white dark:bg-gray-800 rounded-full p-2 shadow-md">
        <i class="fas fa-chevron-right text-gray-500 dark:text-gray-400"></i>
      </button>
      
      <!-- Testimonial Slide Track -->
      <div id="testimonial-track" class="flex transition-transform duration-500">
        {testimonials.map((testimonial) => (
          <div class="testimonial-slide flex-shrink-0 px-3">
            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm h-full flex flex-col border border-gray-100 dark:border-gray-700">
              {/* Rating Stars */}
              <div class="flex text-yellow-400 mb-4">
                {[...Array(5)].map((_, i) => (
                  <span class="mr-0.5">
                    <i class={`fa-${i < testimonial.rating ? 'solid' : 'regular'} fa-star`}></i>
                  </span>
                ))}
                <span class="text-gray-400 dark:text-gray-500 text-xs ml-2 font-medium mt-0.5">Verified Client</span>
              </div>
              
              {/* Quote Content */}
              <div class="mb-6 flex-grow">
                <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
                  "{testimonial.content}"
                </p>
              </div>
              
              {/* Client Info */}
              <div class="flex items-start mt-auto pt-4 border-t border-gray-100 dark:border-gray-700">
                <div class="w-12 h-12 rounded-full overflow-hidden mr-4 bg-gray-100 dark:bg-gray-700 flex-shrink-0">
                  <img 
                    src={testimonial.image_url} 
                    alt={testimonial.author} 
                    class="w-full h-full object-cover"
                    decoding="async"
                  />
                </div>
                <div>
                  <h4 class="font-medium text-gray-900 dark:text-white">
                    {testimonial.author}
                  </h4>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-0.5">
                    {testimonial.position}
                  </p>
                  <p class="text-sm text-greenberry-600 dark:text-greenberry-500 font-medium mt-0.5">
                    {testimonial.organisation}
                  </p>
                  
                  {testimonial.url && (
                    <a 
                      href={`https://${testimonial.url}`} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="inline-flex items-center mt-2 text-xs text-greenberry-600 dark:text-greenberry-400 hover:text-greenberry-700 dark:hover:text-greenberry-300"
                    >
                      <i class="fas fa-globe text-greenberry-500 mr-1.5 text-xs"></i>
                      <span>{testimonial.url}</span>
                      <i class="fas fa-external-link-alt text-xs ml-1 opacity-70"></i>
                    </a>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Dots Navigation -->
      <div class="dots-container flex justify-center mt-6 space-x-2">
        {testimonials.map((_, index) => (
          <button 
            class="dot w-2 h-2 rounded-full bg-gray-300 dark:bg-gray-700" 
            data-index={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </Container>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Get DOM elements
    const track = document.getElementById('testimonial-track');
    const slides = document.querySelectorAll('.testimonial-slide');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = document.querySelectorAll('.dot');
    
    // Variables
    let currentIndex = 0;
    let slideWidth;
    let slidesToShow;
    let autoplayTimeout;
    let isTransitioning = false;
    const originalSlides = slides.length;
    
    // Clone slides for infinite loop
    function cloneSlides() {
      // Clone slides at the beginning and end to create infinite loop effect
      for (let i = 0; i < slides.length; i++) {
        const clone = slides[i].cloneNode(true);
        track.appendChild(clone);
      }
      
      // Set the first slide as active with no transition
      moveToSlide(originalSlides, false);
    }
    
    // Calculate slide dimensions
    function calculateDimensions() {
      // Reset the transition while calculating
      track.style.transition = 'none';
      
      // Determine slides to show based on screen width
      if (window.innerWidth >= 1024) {
        slidesToShow = 3; // Desktop
      } else if (window.innerWidth >= 640) {
        slidesToShow = 2; // Tablet
      } else {
        slidesToShow = 1; // Mobile
      }
      
      // Calculate individual slide width
      slideWidth = track.parentNode.clientWidth / slidesToShow;
      
      // Set width for all slides
      document.querySelectorAll('.testimonial-slide').forEach(slide => {
        slide.style.width = `${slideWidth}px`;
      });
      
      // Set track width
      track.style.width = `${slideWidth * track.children.length}px`;
      
      // Restore the position without animation
      moveToSlide(currentIndex, false);
      
      // Re-enable transition after a brief delay
      setTimeout(() => {
        track.style.transition = 'transform 500ms ease';
      }, 50);
    }
    
    // Move to specific slide
    function moveToSlide(index, animate = true) {
      if (isTransitioning) return;
      
      // Set transition based on animate parameter
      track.style.transition = animate ? 'transform 500ms ease' : 'none';
      
      // Calculate position and transform
      const position = -index * slideWidth;
      track.style.transform = `translateX(${position}px)`;
      
      // Update current index
      currentIndex = index;
      
      // Update active dot
      updateActiveDot();
      
      // Handle transition lock
      if (animate) {
        isTransitioning = true;
        setTimeout(() => {
          isTransitioning = false;
          
          // If we've moved past the clones, reset to the original slides
          if (currentIndex >= originalSlides * 2) {
            moveToSlide(originalSlides, false);
          } else if (currentIndex < originalSlides) {
            moveToSlide(originalSlides * 2 - 1, false);
          }
        }, 500);
      }
    }
    
    // Update active dot
    function updateActiveDot() {
      // Calculate which original slide we're on
      const activeDotIndex = (currentIndex - originalSlides) % originalSlides;
      
      // Update all dots
      dots.forEach((dot, i) => {
        if (i === activeDotIndex) {
          dot.classList.add('bg-greenberry-500', 'dark:bg-greenberry-400');
          dot.classList.remove('bg-gray-300', 'dark:bg-gray-700');
        } else {
          dot.classList.remove('bg-greenberry-500', 'dark:bg-greenberry-400');
          dot.classList.add('bg-gray-300', 'dark:bg-gray-700');
        }
      });
    }
    
    // Start autoplay
    function startAutoplay() {
      stopAutoplay(); // Clear any existing timeout
      autoplayTimeout = setTimeout(() => {
        moveToSlide(currentIndex + 1);
        startAutoplay();
      }, 4000);
    }
    
    // Stop autoplay
    function stopAutoplay() {
      if (autoplayTimeout) {
        clearTimeout(autoplayTimeout);
      }
    }
    
    // Initialize slider
    function initSlider() {
      // Clone slides
      cloneSlides();
      
      // Calculate dimensions
      calculateDimensions();
      
      // Set initial dot
      updateActiveDot();
      
      // Add event listeners
      
      // Next button
      nextBtn.addEventListener('click', () => {
        stopAutoplay();
        moveToSlide(currentIndex + 1);
        startAutoplay();
      });
      
      // Previous button
      prevBtn.addEventListener('click', () => {
        stopAutoplay();
        moveToSlide(currentIndex - 1);
        startAutoplay();
      });
      
      // Dot navigation
      dots.forEach((dot, i) => {
        dot.addEventListener('click', () => {
          stopAutoplay();
          moveToSlide(i + originalSlides); // Add offset to account for clones
          startAutoplay();
        });
      });
      
      // Pause on hover/touch
      track.addEventListener('mouseenter', stopAutoplay);
      track.addEventListener('touchstart', stopAutoplay, { passive: true });
      
      // Resume on mouse/touch leave
      track.addEventListener('mouseleave', startAutoplay);
      track.addEventListener('touchend', startAutoplay);
      
      // Handle window resize
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
          calculateDimensions();
        }, 200);
      });
      
      // Handle visibility change (tab change)
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          stopAutoplay();
        } else {
          startAutoplay();
        }
      });
      
      // Fix for Safari image loading issues
      document.querySelectorAll('.testimonial-slide img').forEach(img => {
        img.onerror = function() {
          this.src = 'https://randomuser.me/api/portraits/lego/1.jpg';
        };
        
        // Ensure image is loaded
        if (img.complete) {
          if (img.naturalHeight === 0) {
            img.src = 'https://randomuser.me/api/portraits/lego/1.jpg';
          }
        }
      });
      
      // Start autoplay
      startAutoplay();
    }
    
    // Initialize when DOM is ready
    if (track && slides.length > 0) {
      initSlider();
    }
  });
</script>

<style>
  /* Testimonial slider container */
  .testimonial-slider-container {
    position: relative;
    padding: 0 40px;
  }
  
  /* Navigation buttons */
  #prev-btn, #next-btn {
    opacity: 0.7;
    transition: opacity 0.3s ease;
  }
  
  #prev-btn:hover, #next-btn:hover {
    opacity: 1;
  }
  
  /* Dot navigation */
  .dot {
    transition: background-color 0.3s ease;
  }
  
  /* Mobile adjustments */
  @media (max-width: 640px) {
    .testimonial-slider-container {
      padding: 0 30px;
    }
    
    #prev-btn, #next-btn {
      padding: 0.5rem;
    }
  }
</style>