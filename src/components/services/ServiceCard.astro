---
interface Props {
  id: string;
  title: string;
  description: string;
  icon: string;
  color?: string;
  borderColor?: string;
  textColor?: string;
  buttonTextColor?: string;
  features?: string[] | null;
  link: string;
  ctaText?: string;
  type?: "service" | "solution";
}

const {
  id,
  title,
  description,
  icon,
  color = "blue",
  borderColor = `border-t-${color}-500`,
  textColor = `text-${color}-500`,
  buttonTextColor = "text-green-500", 
  features = [],
  link,
  ctaText = "Learn More",
  type = "service"
} = Astro.props;

// Ensure features is an array before calling slice
const displayFeatures = Array.isArray(features) ? features.slice(0, 6) : [];
---

<div class={`group bg-white dark:bg-gray-800 rounded-lg shadow-xs hover:shadow-md transition-all duration-300 overflow-hidden border-t-4 ${borderColor}`}>
  <div class="p-6">
    <div class={`${textColor} text-4xl mb-4`}>
      <i class={icon}></i>
    </div>
    <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3">
      {title}
    </h3>
    <p class="text-gray-600 dark:text-gray-300 mb-6">
      {description}
    </p>
    
    {displayFeatures.length > 0 && (
      <div class="mt-4 mb-6 space-y-2">
        {displayFeatures.map((feature) => (
          <div class="flex items-start">
            <span class="text-greenberry-500 mr-2 mt-1"><i class="fa-solid fa-check"></i></span>
            <span class="text-sm text-gray-600 dark:text-gray-300">{feature}</span>
          </div>
        ))}
      </div>
    )}
    
    <a 
      href={link} 
      class={`inline-flex items-center ${buttonTextColor} hover:text-greenberry-700 dark:hover:text-greenberry-300 font-medium group`}
      aria-label={ctaText}
    >
      {ctaText}
      <span class="ml-1 text-xs transition-transform group-hover:translate-x-1 duration-300">
        <i class="fa-solid fa-arrow-right"></i>
      </span>
    </a>
  </div>
</div>