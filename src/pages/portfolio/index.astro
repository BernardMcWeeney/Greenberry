---
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/common/Container.astro';
import Button from '../../components/common/Button.astro';
import Badge from '../../components/ui/Badge.astro';
import PageHeader from '../../components/common/PageHeader.astro';
import Cta from '../../components/home/Cta.astro';
import { portfolioProjects } from '../../data/portfolioProjects';
import { SEO } from "astro-seo";

// Extract unique categories
const categorySet = new Set<string>();
portfolioProjects.forEach((project) => {
  categorySet.add(project.category);
});

// Convert Set to Array
const categories = Array.from(categorySet);
---

<Layout title="Our Portfolio | Greenberry - Web Design for Irish Businesses">
  <!-- Hero Section using PageHeader component -->
  <PageHeader
    title="Our Portfolio"
    description="Explore our collection of successful projects designed for Irish businesses. Each website is crafted to engage visitors and drive results."
    backgroundVariant="decorated"
    badgeText="OUR WORK"
    highlightedText="Portfolio"
    highlightPosition="end"
    paddingY="md"
  />
  
  <section class="pt-8 md:pt-12 pb-6 bg-white dark:bg-gray-900">
    <Container>
      <!-- Category Filter -->
      <div class="flex flex-wrap justify-center gap-3 mb-8" id="category-filters">
        <button 
          class="filter-btn active px-4 py-2 rounded-full bg-greenberry-600 text-white font-medium transition-colors hover:bg-greenberry-700 focus:outline-hidden focus:ring-3-2 focus:ring-3-greenberry-500 focus:ring-3-offset-2" 
          data-category="all"
        >
          All Projects
        </button>
        {categories.map(category => (
          <button 
            class="filter-btn px-4 py-2 rounded-full bg-white/70 dark:bg-gray-800/70 backdrop-blur-xs text-gray-700 dark:text-gray-300 font-medium border border-gray-200/60 dark:border-gray-700/60 transition-colors hover:bg-greenberry-600 hover:text-white hover:border-transparent focus:outline-hidden focus:ring-3-2 focus:ring-3-greenberry-500 focus:ring-3-offset-2" 
            data-category={category}
          >
            {category}
          </button>
        ))}
      </div>
    </Container>
  </section>
  
  <!-- Portfolio Grid -->
  <section class="bg-white dark:bg-gray-900 pb-16">
    <Container>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8" id="portfolio-grid">
        {portfolioProjects.map((project) => (
          <div 
            class="group portfolio-item bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-md hover:shadow-lg border border-gray-100 dark:border-gray-700 hover:border-greenberry-500/40 dark:hover:border-greenberry-500/40 transition-all duration-300" 
            data-category={project.category}
          >
            <!-- Project Image with overlay -->
            <div class="relative overflow-hidden aspect-video">
              <img 
                src={project.image} 
                alt={`${project.title} project thumbnail`} 
                class="w-full h-full object-cover"
                width="600"
                height="338"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-gray-900/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-4 md:p-6">
                <div>
                  <Badge text={project.category} variant="primary" size="sm" class="mb-2" />
                  <h3 class="text-white text-xl font-bold">{project.title}</h3>
                </div>
              </div>
            </div>
            
            <!-- Project Info -->
            <div class="p-4 md:p-6">
              <div class="flex flex-wrap gap-2 mb-4">
                {project.tags && project.tags.map(tag => (
                  <span class="text-xs font-medium py-1 px-2 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                    {tag}
                  </span>
                ))}
              </div>
              
              <h3 class="text-lg md:text-xl font-bold text-gray-900 dark:text-white mb-3">
                {project.title}
              </h3>
              
              <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-2">
                {project.description}
              </p>
              
              <a 
                href={`/portfolio/${project.id}`} 
                class="inline-flex items-center text-greenberry-600 hover:text-greenberry-700 dark:text-greenberry-400 dark:hover:text-greenberry-300 font-medium"
                aria-label={`View details of ${project.title} project`}
              >
                View Project
                <span class="ml-1 text-xs">
                  <i class="fa-solid fa-arrow-right" aria-hidden="true"></i>
                </span>
              </a>
            </div>
          </div>
        ))}
      </div>
    </Container>
  </section>
  
  <!-- CTA Section -->
  <Cta />
</Layout>

<script is:inline>
  // Use is:inline to ensure the script runs immediately when the page loads
  function initPortfolioFilters() {
    // Function to filter projects
    function filterProjects(category) {
      const portfolioItems = document.querySelectorAll('.portfolio-item');
      
      portfolioItems.forEach(item => {
        if (category === 'all' || item.getAttribute('data-category') === category) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    }

    // Function to update filter button styles
    function updateFilterButtons(activeButton) {
      const filterButtons = document.querySelectorAll('.filter-btn');
      
      filterButtons.forEach(btn => {
        // Reset all buttons to inactive state
        btn.classList.remove('active', 'bg-greenberry-600', 'text-white');
        btn.classList.add('bg-white/70', 'dark:bg-gray-800/70', 'text-gray-700', 'dark:text-gray-300', 'border', 'border-gray-200/60', 'dark:border-gray-700/60');
      });
      
      // Set active button
      activeButton.classList.add('active', 'bg-greenberry-600', 'text-white');
      activeButton.classList.remove('bg-white/70', 'dark:bg-gray-800/70', 'text-gray-700', 'dark:text-gray-300', 'border', 'border-gray-200/60', 'dark:border-gray-700/60');
    }

    // Add click listeners to filter buttons
    const filterButtons = document.querySelectorAll('.filter-btn');
    if (filterButtons.length) {
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const category = button.getAttribute('data-category');
          updateFilterButtons(button);
          filterProjects(category);
        });
      });
    }

    // Check if URL has a category parameter
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');
    
    if (categoryParam) {
      const targetButton = document.querySelector(`.filter-btn[data-category="${categoryParam}"]`);
      if (targetButton) {
        updateFilterButtons(targetButton);
        filterProjects(categoryParam);
      }
    }
  }

  // Make sure this runs both on DOMContentLoaded and on Astro page transitions
  document.addEventListener('DOMContentLoaded', function() {
    // If Astro View Transitions are being used, the page load event will handle it
    // Otherwise, initialize immediately
    if (!document.querySelector('html').hasAttribute('data-astro-transition')) {
      initPortfolioFilters();
    }
  });

  // For Astro View Transitions support
  document.addEventListener('astro:page-load', initPortfolioFilters);
</script>

<style>
  /* Line clamp for descriptions */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Improved focus styles for better accessibility */
  :focus-visible {
    outline: 2px solid var(--greenberry-600, #2e7d32);
    outline-offset: 2px;
  }
</style>