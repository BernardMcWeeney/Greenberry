---
// src/pages/solutions/[slug].astro
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/common/Container.astro';
import Button from '../../components/common/Button.astro'; // Assuming
import Badge from '../../components/ui/Badge.astro';
import PageHeader from '../../components/common/PageHeader.astro';
import PageCta from '../../components/common/PageCta.astro';
// FeatureCard might not be used if solution.features are just strings. We'll style them directly.
// import FeatureCard from '../../components/services/FeatureCard.astro';
import ServiceCard from '../../components/services/ServiceCard.astro';
// ProcessSteps is not typically part of a solution page, usually for services.
// import ProcessSteps from '../../components/services/ProcessSteps.astro';
import ServiceFAQ from '../../components/services/ServiceFAQ.astro';
import Icon from '../../components/common/Icon.astro'; // Import the Icon component
import { SEO } from "astro-seo";

// Import solutions and services data
import { solutions, type Solution } from '../../data/solutions';
import { services, type Service } from '../../data/services';

export async function getStaticPaths() {
  return solutions.map(solution => ({
    params: { slug: solution.id },
    props: { solution },
  }));
}

interface Props {
  solution: Solution;
}

const { solution } = Astro.props;

// Get included services based on the solution's includes array
const includedServices = (solution.includes || [])
  .map(id => services.find(service => service.id === id))
  .filter((service): service is Service => service !== undefined);

// Determine the appropriate color for the solution
const solutionColor = solution.color || "indigo"; // Fallback color
const solutionTextColor = solution.textColor || `text-${solutionColor}-600`;
const solutionBorderColor = solution.borderColor || `border-t-${solutionColor}-500`;
const solutionBgLightColor = `bg-${solutionColor}-50 dark:bg-${solutionColor}-900/30`;
const solutionAccentDarkColor = `dark:text-${solutionColor}-400`;

// Generic Solution FAQs (as a fallback)
const genericSolutionFaqs = [
  {
    question: "How does billing work for this solution?",
    answer: "Our solutions are typically offered as monthly subscriptions with clear, predictable pricing. You can choose to pay monthly or annually, with annual payments offering a discount. There are no hidden fees or unexpected costs."
  },
  {
    question: "Can I customize this solution to fit my specific needs?",
    answer: "Absolutely! While our solutions are designed to cover typical needs, we understand that every business is unique. We can customize any solution to add or remove specific services based on your requirements."
  },
  {
    question: "Is there a minimum contract period?",
    answer: "Most of our solutions have a 3-month minimum commitment. Some individual services within a solution, like a full website build, may have their own initial terms discussed upfront."
  },
  {
    question: "How quickly can you implement this solution?",
    answer: "Implementation timelines vary. Basic setup can be within days, while comprehensive solutions involving new designs or complex integrations might take 4-8 weeks for full deployment."
  },
  {
    question: "What kind of support is included?",
    answer: "All our solutions include responsive email and phone support during business hours. Specific Service Level Agreements (SLAs) may apply depending on the solution tier."
  }
];

// Use solution-specific FAQs if available, otherwise use generic ones
const faqsToDisplay = (solution.faqs && solution.faqs.length > 0) ? solution.faqs : genericSolutionFaqs;

// Predefined benefits for solutions
const solutionBenefits = [
  {
    icon: "fa-solid fa-coins",
    title: "Cost Effective",
    description: "Bundled services typically cost less than purchasing them individually, offering greater value."
  },
  {
    icon: "fa-solid fa-sliders",
    title: "Simplified Management",
    description: "One point of contact, one invoice, and a cohesive strategy make your digital operations easier to manage."
  },
  {
    icon: "fa-solid fa-diagram-project",
    title: "Seamless Integration",
    description: "All included services are designed to work perfectly together, avoiding compatibility issues."
  },
  {
    icon: "fa-solid fa-shield-alt", // Changed from fa-clock to something more solution-oriented
    title: "Comprehensive Coverage",
    description: "Address a wider range of your business needs with a complete, pre-packaged set of tools and services."
  }
];
---

<Layout title={`${solution.title} | Greenberry Digital Solutions`}>
  <SEO
    title={`${solution.title} | Solutions | Greenberry`}
    description={solution.description}
    openGraph={{
      basic: {
        title: `${solution.title} | Greenberry`,
        type: 'website',
        image: `/images/solutions/${solution.id}.png`, // Consider OG images per solution
      },
    }}
  />

  <PageHeader
    title={solution.title}
    description={solution.description}
    backgroundVariant="decorated"
    badgeText="OUR SOLUTIONS"
    highlightedText={solution.title.split(' ')[0]}
    highlightPosition="start"
    paddingY="lg"
    badgeVariant={solution.color}
  />

  <Container>
    <div class="py-12 md:py-16 lg:py-20 space-y-16 lg:space-y-24">

      {solution.features && solution.features.length > 0 && (
        <section class="scroll-mt-24" id="features">
          <div class="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
            <Badge text="Key Features" variant={solution.color} size="md" class="mb-4"/>
            <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
              What This Solution Delivers
            </h2>
            <p class="text-lg text-gray-600 dark:text-gray-300">
              Our {solution.title.toLowerCase()} is packed with powerful features to drive your success.
            </p>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
            {solution.features.map((feature) => (
              <div class={`flex items-start p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 border-l-4 ${solution.borderColor || 'border-l-gray-500'} bg-white dark:bg-gray-800 group`}>
                <Icon name={solution.icon || 'fa-solid fa-check-circle'} class={`text-2xl ${solutionTextColor} ${solutionAccentDarkColor} mr-4 mt-1 flex-shrink-0 group-hover:scale-110 transition-transform`}/>
                <div>
                  <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-1 group-hover:${solutionTextColor} dark:group-hover:${solutionAccentDarkColor} transition-colors">
                    {feature.split(':')[0]}
                  </h3>
                  {feature.includes(':') && (
                     <p class="text-gray-600 dark:text-gray-300 text-sm">{feature.substring(feature.indexOf(':') + 1).trim()}</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </section>
      )}

      {includedServices.length > 0 && (
        <section class={`py-12 md:py-16 rounded-xl scroll-mt-24 ${solutionBgLightColor}`} id="services">
          <Container>
            <div class="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
              <Badge text="Bundled Services" variant={solution.color} size="md" class="mb-4"/>
              <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
                Services Included in {solution.title}
              </h2>
              <p class="text-lg text-gray-600 dark:text-gray-300">
                This solution integrates the following core services for a complete experience.
              </p>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              {includedServices.map((service) => {
                const serviceFeaturesForCard = Array.isArray(service.features) ? service.features.slice(0, 3) : [];
                return (
                  <ServiceCard
                    id={service.id}
                    title={service.title}
                    description={service.description}
                    icon={service.icon}
                    color={service.color}
                    textColor={service.textColor}
                    borderColor={service.borderColor}
                    buttonTextColor={`text-${service.color}-600 dark:text-${service.color}-400`}
                    features={serviceFeaturesForCard}
                    link={service.link}
                    ctaText={`Explore ${service.shortTitle || service.title.split(" ")[0]}`}
                    isAddOn={false} {/* Assuming these are not add-ons in this context */}
                    type="service"
                  />
                );
              })}
            </div>
          </Container>
        </section>
      )}

      <section class="scroll-mt-24" id="benefits">
        <div class="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
          <Badge text="Solution Advantages" variant={solution.color} size="md" class="mb-4"/>
          <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
            Why Choose a {solution.title.split(' ')[0]} Package?
          </h2>
          <p class="text-lg text-gray-600 dark:text-gray-300">
            Opting for a comprehensive solution like our {solution.title.toLowerCase()} offers distinct advantages.
          </p>
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8">
          {solutionBenefits.map((benefit) => (
            <div class="text-center p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800 border-t-4 ${solutionBorderColor}">
              <div class={`${solutionTextColor} ${solutionAccentDarkColor} text-4xl mb-5 inline-block`}>
                <Icon name={benefit.icon} />
              </div>
              <h3 class="text-xl font-bold text-gray-800 dark:text-white mb-2">{benefit.title}</h3>
              <p class="text-gray-600 dark:text-gray-300 text-sm">{benefit.description}</p>
            </div>
          ))}
        </div>
      </section>

      {faqsToDisplay.length > 0 && (
        <section class={`py-12 md:py-16 rounded-xl scroll-mt-24 ${solutionBgLightColor}`} id="faq">
          <Container>
            <div class="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
              <Badge text="Your Questions Answered" variant={solution.color} size="md" class="mb-4"/>
              <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
                Frequently Asked Questions
              </h2>
              <p class="text-lg text-gray-600 dark:text-gray-300">
                Find answers to common queries about the {solution.title.toLowerCase()}.
              </p>
            </div>
            <div class="max-w-3xl mx-auto">
              <ServiceFAQ faqs={faqsToDisplay} />
            </div>
          </Container>
        </section>
      )}
    </div>
  </Container>

  <PageCta
    title={`Ready to Implement the ${solution.title}?`}
    description={`Take the next step towards a streamlined and powerful digital presence. Contact us today to discuss how the ${solution.title.toLowerCase()} can be tailored to your business.`}
    badgeText="LET'S TALK"
    primaryButtonText={solution.ctaText || "Discuss Your Project"}
    primaryButtonHref="/contact" // Or make this dynamic: solution.link
    secondaryButtonText="View All Solutions"
    secondaryButtonHref="/solutions"
    footnote="Consultations are free and no-obligation."
    backgroundColor={solution.color}
  />
</Layout>